"""
–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏
–í–µ—Ä—Å—ñ—è 2.0 - –∑ –ø–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º —Ç–∞ –¥–∞–Ω–∏–º–∏
"""

import sqlite3
import json
import random
import hashlib
import time
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import sys


class ProgressBar:
    """–ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ"""

    def __init__(self, total: int, prefix: str = "–ü—Ä–æ–≥—Ä–µ—Å", length: int = 50):
        self.total = total
        self.prefix = prefix
        self.length = length
        self.current = 0

    def update(self, step: int = 1):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä—É"""
        self.current += step
        percent = (self.current / self.total) * 100
        filled_length = int(self.length * self.current // self.total)
        bar = '‚ñà' * filled_length + '-' * (self.length - filled_length)

        sys.stdout.write(
            f'\r{self.prefix} |{bar}| {percent:.1f}% ({self.current}/{self.total})')
        sys.stdout.flush()

        if self.current >= self.total:
            print()  # –ù–æ–≤–∏–π —Ä—è–¥–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è


class EnhancedDemoDataGenerator:
    """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""

    def __init__(self, db_name: str):
        self.db_name = db_name
        self.stats = {
            'users_created': 0,
            'questions_created': 0,
            'test_results_created': 0,
            'answer_details_created': 0
        }

    def clear_demo_data(self):
        """–û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        print("–û—á–∏—â–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        try:
            # –í–∏–¥–∞–ª—è—î–º–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (—á–µ—Ä–µ–∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–ª—é—á—ñ)
            cursor.execute("DELETE FROM answer_details")
            cursor.execute("DELETE FROM test_results")
            # –ó–∞–ª–∏—à–∞—î–º–æ –±–∞–∑–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è
            cursor.execute("DELETE FROM questions WHERE id > 50")
            cursor.execute(
                "DELETE FROM users WHERE username LIKE 'demo_%' OR username LIKE '%.%'")

            conn.commit()
            print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
            conn.rollback()
        finally:
            conn.close()

    def generate_realistic_users(self, count: int = 25):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å–ø–∏—Å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö —ñ–º–µ–Ω
        male_names = [
            "–û–ª–µ–∫—Å–∞–Ω–¥—Ä", "–Ü–≤–∞–Ω", "–ü–µ—Ç—Ä–æ", "–ú–∏—Ö–∞–π–ª–æ", "–ê–Ω–¥—Ä—ñ–π", "–°–µ—Ä–≥—ñ–π",
            "–î–º–∏—Ç—Ä–æ", "–í–æ–ª–æ–¥–∏–º–∏—Ä", "–†–æ–º–∞–Ω", "–í—ñ—Ç–∞–ª—ñ–π", "–ú–∞–∫—Å–∏–º", "–ê—Ä—Ç–µ–º",
            "–ë–æ–≥–¥–∞–Ω", "–î–µ–Ω–∏—Å", "–Ñ–≤–≥–µ–Ω", "–Ü–≥–æ—Ä", "–ö–æ—Å—Ç—è–Ω—Ç–∏–Ω", "–õ–µ–æ–Ω—ñ–¥",
            "–ú–∏–∫–æ–ª–∞", "–û–ª–µ–≥", "–ü–∞–≤–ª–æ", "–†—É—Å–ª–∞–Ω", "–°—Ç–∞–Ω—ñ—Å–ª–∞–≤", "–¢–∞—Ä–∞—Å",
            "–Æ—Ä—ñ–π", "–Ø—Ä–æ—Å–ª–∞–≤", "–í–∞–ª–µ–Ω—Ç–∏–Ω", "–ì–µ–Ω–Ω–∞–¥—ñ–π", "–ï–¥—É–∞—Ä–¥", "–ó–∞—Ö–∞—Ä"
        ]

        female_names = [
            "–ú–∞—Ä—ñ—è", "–ê–Ω–Ω–∞", "–ö–∞—Ç–µ—Ä–∏–Ω–∞", "–û–ª—å–≥–∞", "–ù–∞—Ç–∞–ª—ñ—è", "–Æ–ª—ñ—è",
            "–¢–µ—Ç—è–Ω–∞", "–Ü—Ä–∏–Ω–∞", "–°–≤—ñ—Ç–ª–∞–Ω–∞", "–õ—é–¥–º–∏–ª–∞", "–í–∞–ª–µ–Ω—Ç–∏–Ω–∞", "–ì–∞–ª–∏–Ω–∞",
            "–û–∫—Å–∞–Ω–∞", "–õ–∞—Ä–∏—Å–∞", "–í—ñ–∫—Ç–æ—Ä—ñ—è", "–ê–ª–ª–∞", "–í—ñ—Ä–∞", "–î–∞—Ä–∏–Ω–∞",
            "–ï–ª–µ–Ω–∞", "–ñ–∞–Ω–Ω–∞", "–ó–æ—è", "–Ü–Ω–Ω–∞", "–ö–∞—Ä–∏–Ω–∞", "–õ—ñ–ª—ñ—è",
            "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "–ù–∞–¥—ñ—è", "–ü–æ–ª—ñ–Ω–∞", "–†–µ–≥—ñ–Ω–∞", "–°–æ—Ñ—ñ—è", "–£–ª—è–Ω–∞"
        ]

        last_names = [
            "–Ü–≤–∞–Ω–µ–Ω–∫–æ", "–ü–µ—Ç—Ä–µ–Ω–∫–æ", "–°–∏–¥–æ—Ä–µ–Ω–∫–æ", "–ö–æ–≤–∞–ª–µ–Ω–∫–æ", "–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ",
            "–¢–∫–∞—á–µ–Ω–∫–æ", "–ö—Ä–∞–≤—á–µ–Ω–∫–æ", "–®–µ–≤—á–µ–Ω–∫–æ", "–ü–æ–ª—ñ—â—É–∫", "–õ–∏—Å–µ–Ω–∫–æ",
            "–ú–µ–ª—å–Ω–∏–∫", "–ì—Ä–∏—Ü–µ–Ω–∫–æ", "–°–∞–≤—á–µ–Ω–∫–æ", "–†—É–¥–µ–Ω–∫–æ", "–ú–∞—Ä—á–µ–Ω–∫–æ",
            "–õ–µ–≤—á–µ–Ω–∫–æ", "–°–µ–º–µ–Ω–∫–æ", "–ü–∞–≤–ª–µ–Ω–∫–æ", "–ì–æ–Ω—á–∞—Ä–µ–Ω–∫–æ", "–†–æ–º–∞–Ω–µ–Ω–∫–æ",
            "–°—Ç–µ–ø–∞–Ω–µ–Ω–∫–æ", "–ü–∞–Ω—á–µ–Ω–∫–æ", "–õ–∏—Ç–≤–∏–Ω–µ–Ω–∫–æ", "–ù–∞–∑–∞—Ä–µ–Ω–∫–æ", "–¢–∏–º—á–µ–Ω–∫–æ",
            "–§–µ–¥–æ—Ä–µ–Ω–∫–æ", "–•–∞—Ä—á–µ–Ω–∫–æ", "–¶–∏–º–±–∞–ª–µ–Ω–∫–æ", "–ß–µ—Ä–Ωenko", "–®—É–ª—å–≥–∞"
        ]

        # –î–æ–º–µ–Ω–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—ó –ø–æ—à—Ç–∏
        email_domains = [
            "gmail.com", "ukr.net", "i.ua", "outlook.com", "yahoo.com",
            "meta.ua", "bigmir.net", "rambler.ru", "mail.ru", "hotmail.com"
        ]

        # –ü—Ä–æ—Ñ–µ—Å—ñ—ó/—Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ
        professions = [
            "—Å—Ç—É–¥–µ–Ω—Ç", "–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç", "–≤—á–∏—Ç–µ–ª—å", "—ñ–Ω–∂–µ–Ω–µ—Ä", "–º–µ–Ω–µ–¥–∂–µ—Ä",
            "–¥–∏–∑–∞–π–Ω–µ—Ä", "–∞–Ω–∞–ª—ñ—Ç–∏–∫", "—Ç–µ—Å—Ç—É–≤–∞–ª—å–Ω–∏–∫", "–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", "–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"
        ]

        progress = ProgressBar(count, "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

        for i in range(count):
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä —Å—Ç–∞—Ç—ñ —Ç–∞ —ñ–º–µ–Ω—ñ
            is_male = random.choice([True, False])
            first_name = random.choice(male_names if is_male else female_names)
            last_name = random.choice(last_names)
            profession = random.choice(professions)

            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è username
            username_variants = [
                f"{first_name.lower()}.{last_name.lower()}",
                f"{first_name.lower()}_{last_name.lower()}",
                f"{first_name.lower()}{random.randint(10, 99)}",
                f"{profession}_{first_name.lower()}",
                f"{first_name.lower()}.{profession}",
                f"user_{first_name.lower()}_{random.randint(100, 999)}"
            ]

            username = random.choice(username_variants)

            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è email
            email_variants = [
                f"{username}@{random.choice(email_domains)}",
                f"{first_name.lower()}.{last_name.lower()}@{random.choice(email_domains)}",
                f"{first_name.lower()}{random.randint(1, 99)}@{random.choice(email_domains)}"
            ]

            email = random.choice(email_variants)

            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
            password_base = random.choice([
                f"{first_name.lower()}{random.randint(100, 999)}",
                f"demo{random.randint(100, 999)}",
                f"{profession}{random.randint(10, 99)}",
                f"test{random.randint(1000, 9999)}"
            ])

            password_hash = hashlib.sha256(password_base.encode()).hexdigest()

            # –í–∏–ø–∞–¥–∫–æ–≤–∞ –¥–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–æ—Å—Ç–∞–Ω–Ω—ñ 8 –º—ñ—Å—è—Ü—ñ–≤)
            days_ago = random.randint(1, 240)
            reg_date = datetime.now() - timedelta(days=days_ago)

            # 10% —à–∞–Ω—Å –±—É—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            is_admin = random.random() < 0.1

            try:
                cursor.execute('''
                    INSERT INTO users (username, password_hash, email, registration_date, is_admin)
                    VALUES (?, ?, ?, ?, ?)
                ''', (username, password_hash, email, reg_date.isoformat(), is_admin))

                self.stats['users_created'] += 1

                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–≤—ñ—Ç—É
                if i < 5:
                    print(
                        f"\n  {username} | –ø–∞—Ä–æ–ª—å: {password_base} | {'üëë –∞–¥–º—ñ–Ω' if is_admin else 'üë§ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á'}")

            except sqlite3.IntegrityError:
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î, –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π
                username = f"{username}_{random.randint(1, 999)}"
                try:
                    cursor.execute('''
                        INSERT INTO users (username, password_hash, email, registration_date, is_admin)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (username, password_hash, email, reg_date.isoformat(), is_admin))
                    self.stats['users_created'] += 1
                except:
                    pass

            progress.update()
            time.sleep(0.01)

        conn.commit()
        conn.close()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {self.stats['users_created']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")

    def generate_comprehensive_questions(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É –ø–∏—Ç–∞–Ω—å –¥–ª—è –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
        print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É –ø–∏—Ç–∞–Ω—å...")

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        cursor.execute("SELECT id, name FROM categories")
        categories = dict(cursor.fetchall())

        # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –Ω–∞–±—ñ—Ä –ø–∏—Ç–∞–Ω—å –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        comprehensive_questions = {
            "–û—Å–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è": [
                # –õ–µ–≥–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è
                {
                    "question": "–©–æ —Ç–∞–∫–µ –∑–º—ñ–Ω–Ω–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—ñ?",
                    "type": "multiple_choice",
                    "answer": "–Ü–º–µ–Ω–æ–≤–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –ø–∞–º'—è—Ç—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö",
                    "options": [
                        "–Ü–º–µ–Ω–æ–≤–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –ø–∞–º'—è—Ç—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö",
                        "–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω—å",
                        "–¶–∏–∫–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –∫–æ–¥—É",
                        "–£–º–æ–≤–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä"
                    ],
                    "difficulty": 1,
                    "explanation": "–ó–º—ñ–Ω–Ω–∞ - —Ü–µ —ñ–º–µ–Ω–æ–≤–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å –ø–∞–º'—è—Ç—ñ, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ–≤–Ω–æ–≥–æ —Ç–∏–ø—É –¥–∞–Ω–∏—Ö"
                },
                {
                    "question": "–Ø–∫–∞ —Ä—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—î—é —Ç–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—î—é?",
                    "type": "text_input",
                    "answer": "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –∫–æ–¥ –≤ –º–∞—à–∏–Ω–Ω–∏–π –∫–æ–¥ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å, —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è –≤–∏–∫–æ–Ω—É—î –∫–æ–¥ —Ä—è–¥–æ–∫ –∑–∞ —Ä—è–¥–∫–æ–º",
                    "options": None,
                    "difficulty": 2,
                    "explanation": "–ö–æ–º–ø—ñ–ª—è—Ç–æ—Ä –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤–µ—Å—å –∫–æ–¥ –≤ –º–∞—à–∏–Ω–Ω–∏–π –∫–æ–¥ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º, —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –≤–∏–∫–æ–Ω—É—î –∫–æ–¥ –ø–æ —Ä—è–¥–∫–∞—Ö"
                },
                {
                    "question": "Python —î —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–æ–≤–∞–Ω–æ—é –º–æ–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 1,
                    "explanation": "Python –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É"
                },
                {
                    "question": "–©–æ –≤–∏–≤–µ–¥–µ –∫–æ–¥: print(2 ** 3)?",
                    "type": "multiple_choice",
                    "answer": "8",
                    "options": ["6", "8", "9", "23"],
                    "difficulty": 1,
                    "explanation": "–û–ø–µ—Ä–∞—Ç–æ—Ä ** –æ–∑–Ω–∞—á–∞—î –ø—ñ–¥–Ω–µ—Å–µ–Ω–Ω—è –¥–æ —Å—Ç–µ–ø–µ–Ω—è, 2¬≥ = 8"
                },
                {
                    "question": "–Ø–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ —Å–ø–∏—Å–∫—É –≤ Python?",
                    "type": "text_input",
                    "answer": "len",
                    "options": None,
                    "difficulty": 1,
                    "explanation": "–§—É–Ω–∫—Ü—ñ—è len() –ø–æ–≤–µ—Ä—Ç–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ"
                },
                # –°–µ—Ä–µ–¥–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
                {
                    "question": "–©–æ —Ç–∞–∫–µ —Ä–µ–∫—É—Ä—Å—ñ—è –≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—ñ?",
                    "type": "multiple_choice",
                    "answer": "–í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—î—é —Å–∞–º–æ—ó —Å–µ–±–µ",
                    "options": [
                        "–í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—î—é —Å–∞–º–æ—ó —Å–µ–±–µ",
                        "–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Ü–∏–∫–ª—É",
                        "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó",
                        "–û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"
                    ],
                    "difficulty": 2,
                    "explanation": "–†–µ–∫—É—Ä—Å—ñ—è - —Ü–µ —Ç–µ—Ö–Ω—ñ–∫–∞, –∫–æ–ª–∏ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–∫–ª–∏–∫–∞—î —Å–∞–º—É —Å–µ–±–µ –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –ø—ñ–¥–∑–∞–¥–∞—á"
                },
                {
                    "question": "–Ø–∫–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø–æ—à—É–∫—É?",
                    "type": "multiple_choice",
                    "answer": "O(n)",
                    "options": ["O(1)", "O(log n)", "O(n)", "O(n¬≤)"],
                    "difficulty": 2,
                    "explanation": "–õ—ñ–Ω—ñ–π–Ω–∏–π –ø–æ—à—É–∫ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç, —Ç–æ–º—É –º–∞—î –ª—ñ–Ω—ñ–π–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å O(n)"
                },
                {
                    "question": "–î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –≤ Python –¥–æ–∑–≤–æ–ª—è—é—Ç—å –º–æ–¥–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É —Ñ—É–Ω–∫—Ü—ñ–π",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 3,
                    "explanation": "–î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ - —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –ø—Ä–∏–π–º–∞—é—Ç—å —ñ–Ω—à—É —Ñ—É–Ω–∫—Ü—ñ—é —ñ —Ä–æ–∑—à–∏—Ä—é—é—Ç—å —ó—ó –ø–æ–≤–µ–¥—ñ–Ω–∫—É"
                },
                # –í–∞–∂–∫—ñ –ø–∏—Ç–∞–Ω–Ω—è
                {
                    "question": "–©–æ —Ç–∞–∫–µ –∑–∞–º–∏–∫–∞–Ω–Ω—è (closure) –≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—ñ?",
                    "type": "text_input",
                    "answer": "–§—É–Ω–∫—Ü—ñ—è –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –∑–º—ñ–Ω–Ω–∏—Ö –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ",
                    "options": None,
                    "difficulty": 3,
                    "explanation": "–ó–∞–º–∏–∫–∞–Ω–Ω—è - —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –∑–º—ñ–Ω–Ω–∏—Ö –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó"
                }
            ],

            "–ê–ª–≥–æ—Ä–∏—Ç–º–∏ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö": [
                {
                    "question": "–Ø–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–∏–Ω—Ü–∏–ø LIFO?",
                    "type": "multiple_choice",
                    "answer": "–°—Ç–µ–∫",
                    "options": ["–ß–µ—Ä–≥–∞", "–°—Ç–µ–∫", "–°–ø–∏—Å–æ–∫", "–î–µ—Ä–µ–≤–æ"],
                    "difficulty": 1,
                    "explanation": "LIFO (Last In, First Out) - –ø—Ä–∏–Ω—Ü–∏–ø —Ä–æ–±–æ—Ç–∏ —Å—Ç–µ–∫—É"
                },
                {
                    "question": "–ë—ñ–Ω–∞—Ä–Ω–µ –¥–µ—Ä–µ–≤–æ –ø–æ—à—É–∫—É –∑–∞–≤–∂–¥–∏ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–µ",
                    "type": "true_false",
                    "answer": "False",
                    "options": None,
                    "difficulty": 2,
                    "explanation": "–ó–≤–∏—á–∞–π–Ω–µ –±—ñ–Ω–∞—Ä–Ω–µ –¥–µ—Ä–µ–≤–æ –ø–æ—à—É–∫—É –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–∏–º, –¥–ª—è –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω–æ—Å—Ç—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏"
                },
                {
                    "question": "–Ø–∫–∞ —Å–µ—Ä–µ–¥–Ω—è —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø–æ—à—É–∫—É –≤ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ñ?",
                    "type": "multiple_choice",
                    "answer": "O(1)",
                    "options": ["O(1)", "O(log n)", "O(n)", "O(n log n)"],
                    "difficulty": 2,
                    "explanation": "–•–µ—à-—Ç–∞–±–ª–∏—Ü—è –∑–∞–±–µ–∑–ø–µ—á—É—î –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∏–π —á–∞—Å –ø–æ—à—É–∫—É –≤ —Å–µ—Ä–µ–¥–Ω—å–æ–º—É –≤–∏–ø–∞–¥–∫—É"
                },
                {
                    "question": "–ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —à–ª—è—Ö –≤ –≥—Ä–∞—Ñ—ñ",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 3,
                    "explanation": "–ê–ª–≥–æ—Ä–∏—Ç–º –î–µ–π–∫—Å—Ç—Ä–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —à–ª—è—Ö–∏ –≤—ñ–¥ –æ–¥–Ω–æ—ó –≤–µ—Ä—à–∏–Ω–∏ –¥–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö"
                },
                {
                    "question": "–©–æ —Ç–∞–∫–µ –¥–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è?",
                    "type": "text_input",
                    "answer": "–ú–µ—Ç–æ–¥ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á —à–ª—è—Ö–æ–º —Ä–æ–∑–±–∏—Ç—Ç—è –Ω–∞ –ø—ñ–¥–∑–∞–¥–∞—á—ñ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤",
                    "options": None,
                    "difficulty": 3,
                    "explanation": "–î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è - —Ü–µ —Ç–µ—Ö–Ω—ñ–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—ñ–¥–∑–∞–¥–∞—á –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –æ–±—á–∏—Å–ª–µ–Ω—å"
                }
            ],

            "–ë–∞–∑–∏ –¥–∞–Ω–∏—Ö": [
                {
                    "question": "–©–æ –æ–∑–Ω–∞—á–∞—î SQL?",
                    "type": "multiple_choice",
                    "answer": "Structured Query Language",
                    "options": [
                        "Structured Query Language",
                        "Simple Query Language",
                        "Standard Query Language",
                        "System Query Language"
                    ],
                    "difficulty": 1,
                    "explanation": "SQL - Structured Query Language, –º–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤"
                },
                {
                    "question": "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ NULL –∑–Ω–∞—á–µ–Ω–Ω—è",
                    "type": "true_false",
                    "answer": "False",
                    "options": None,
                    "difficulty": 1,
                    "explanation": "–ü–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ NULL –∑–Ω–∞—á–µ–Ω–Ω—è —ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º"
                },
                {
                    "question": "–Ø–∫–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É —Ç–∞–±–ª–∏—Ü—é –≤ SQL?",
                    "type": "text_input",
                    "answer": "CREATE TABLE",
                    "options": None,
                    "difficulty": 1,
                    "explanation": "–ö–æ–º–∞–Ω–¥–∞ CREATE TABLE –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å"
                },
                {
                    "question": "–©–æ —Ç–∞–∫–µ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö?",
                    "type": "multiple_choice",
                    "answer": "–ü—Ä–æ—Ü–µ—Å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–¥–º—ñ—Ä–Ω–æ—Å—Ç—ñ",
                    "options": [
                        "–ü—Ä–æ—Ü–µ—Å –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –Ω–∞–¥–º—ñ—Ä–Ω–æ—Å—Ç—ñ",
                        "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π",
                        "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤",
                        "–®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö"
                    ],
                    "difficulty": 2,
                    "explanation": "–ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º–µ–Ω—à—É—î –¥—É–±–ª—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞ –ø–æ–∫—Ä–∞—â—É—î —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"
                },
                {
                    "question": "ACID –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑–∞–±–µ–∑–ø–µ—á—É—é—Ç—å –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 3,
                    "explanation": "ACID (Atomicity, Consistency, Isolation, Durability) - –æ—Å–Ω–æ–≤–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –Ω–∞–¥—ñ–π–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"
                }
            ],

            "–ú–µ—Ä–µ–∂—ñ —Ç–∞ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç": [
                {
                    "question": "–©–æ –æ–∑–Ω–∞—á–∞—î HTTP?",
                    "type": "multiple_choice",
                    "answer": "HyperText Transfer Protocol",
                    "options": [
                        "HyperText Transfer Protocol",
                        "HyperText Transport Protocol",
                        "High Transfer Text Protocol",
                        "HyperLink Transfer Protocol"
                    ],
                    "difficulty": 1,
                    "explanation": "HTTP - –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–µ—Ä–µ–¥–∞—á—ñ –≥—ñ–ø–µ—Ä—Ç–µ–∫—Å—Ç—É, –æ—Å–Ω–æ–≤–∞ –≤–µ–±-–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π"
                },
                {
                    "question": "IP-–∞–¥—Ä–µ—Å–∞ –≤–µ—Ä—Å—ñ—ó 4 —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 4 –æ–∫—Ç–µ—Ç—ñ–≤",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 1,
                    "explanation": "IPv4 –∞–¥—Ä–µ—Å–∞ –º–∞—î —Ñ–æ—Ä–º–∞—Ç xxx.xxx.xxx.xxx, –¥–µ –∫–æ–∂–µ–Ω xxx - —Ü–µ –æ–∫—Ç–µ—Ç (0-255)"
                },
                {
                    "question": "–Ø–∫–∏–π –ø–æ—Ä—Ç –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î HTTPS?",
                    "type": "text_input",
                    "answer": "443",
                    "options": None,
                    "difficulty": 2,
                    "explanation": "HTTPS –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–æ—Ä—Ç 443, –∞ HTTP - –ø–æ—Ä—Ç 80"
                },
                {
                    "question": "–©–æ —Ç–∞–∫–µ DNS?",
                    "type": "multiple_choice",
                    "answer": "Domain Name System",
                    "options": [
                        "Domain Name System",
                        "Data Network Service",
                        "Dynamic Network System",
                        "Digital Name Service"
                    ],
                    "difficulty": 2,
                    "explanation": "DNS –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î –¥–æ–º–µ–Ω–Ω—ñ —ñ–º–µ–Ω–∞ –≤ IP-–∞–¥—Ä–µ—Å–∏"
                },
                {
                    "question": "TCP –≥–∞—Ä–∞–Ω—Ç—É—î –¥–æ—Å—Ç–∞–≤–∫—É –ø–∞–∫–µ—Ç—ñ–≤ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 2,
                    "explanation": "TCP - –Ω–∞–¥—ñ–π–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª, —è–∫–∏–π –≥–∞—Ä–∞–Ω—Ç—É—î –¥–æ—Å—Ç–∞–≤–∫—É —Ç–∞ –ø–æ—Ä—è–¥–æ–∫ –ø–∞–∫–µ—Ç—ñ–≤"
                }
            ],

            "–û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–∏": [
                {
                    "question": "–©–æ —Ç–∞–∫–µ –ø—Ä–æ—Ü–µ—Å –≤ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ?",
                    "type": "multiple_choice",
                    "answer": "–ü—Ä–æ–≥—Ä–∞–º–∞, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è",
                    "options": [
                        "–ü—Ä–æ–≥—Ä–∞–º–∞, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è",
                        "–§–∞–π–ª –Ω–∞ –¥–∏—Å–∫—É",
                        "–û–±–ª–∞—Å—Ç—å –ø–∞–º'—è—Ç—ñ",
                        "–ú–µ—Ä–µ–∂–µ–≤–µ –∑'—î–¥–Ω–∞–Ω–Ω—è"
                    ],
                    "difficulty": 1,
                    "explanation": "–ü—Ä–æ—Ü–µ—Å - —Ü–µ –µ–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–≥—Ä–∞–º–∏, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –≤ –ø–∞–º'—è—Ç—ñ"
                },
                {
                    "question": "–í—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ –ø–∞–º'—è—Ç—å –¥–æ–∑–≤–æ–ª—è—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ –ø–∞–º'—è—Ç—ñ, –Ω—ñ–∂ —Ñ—ñ–∑–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 2,
                    "explanation": "–í—ñ—Ä—Ç—É–∞–ª—å–Ω–∞ –ø–∞–º'—è—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–∏—Å–∫ —è–∫ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–º'—è—Ç—ñ"
                },
                {
                    "question": "–Ø–∫–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—É—î –∑–∞–ø—É—â–µ–Ω—ñ –ø—Ä–æ—Ü–µ—Å–∏ –≤ Linux?",
                    "type": "text_input",
                    "answer": "ps",
                    "options": None,
                    "difficulty": 2,
                    "explanation": "–ö–æ–º–∞–Ω–¥–∞ ps –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤"
                },
                {
                    "question": "–©–æ —Ç–∞–∫–µ deadlock?",
                    "type": "multiple_choice",
                    "answer": "–í–∑–∞—î–º–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤",
                    "options": [
                        "–í–∑–∞—î–º–Ω–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—ñ–≤",
                        "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É",
                        "–ü–æ–º–∏–ª–∫–∞ –ø–∞–º'—è—Ç—ñ",
                        "–ú–µ—Ä–µ–∂–µ–≤–∞ –ø–æ–º–∏–ª–∫–∞"
                    ],
                    "difficulty": 3,
                    "explanation": "Deadlock –≤–∏–Ω–∏–∫–∞—î, –∫–æ–ª–∏ –ø—Ä–æ—Ü–µ—Å–∏ –≤–∑–∞—î–º–Ω–æ –±–ª–æ–∫—É—é—Ç—å –æ–¥–∏–Ω –æ–¥–Ω–æ–≥–æ, —á–µ–∫–∞—é—á–∏ —Ä–µ—Å—É—Ä—Å–∏"
                }
            ],

            "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –±–µ–∑–ø–µ–∫–∞": [
                {
                    "question": "–©–æ —Ç–∞–∫–µ —Ö–µ—à—É–≤–∞–Ω–Ω—è?",
                    "type": "multiple_choice",
                    "answer": "–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä",
                    "options": [
                        "–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä",
                        "–®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∑ –∫–ª—é—á–µ–º",
                        "–°—Ç–∏—Å–Ω–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤",
                        "–†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è"
                    ],
                    "difficulty": 1,
                    "explanation": "–•–µ—à—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä—é—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –≤—ñ–¥–±–∏—Ç–æ–∫ –¥–∞–Ω–∏—Ö —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É"
                },
                {
                    "question": "–°–∏–º–µ—Ç—Ä–∏—á–Ω–µ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ–¥–∏–Ω –∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä–æ–∑—à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 2,
                    "explanation": "–ü—Ä–∏ —Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ–º—É —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—ñ —Ç–æ–π —Å–∞–º–∏–π –∫–ª—é—á –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±–æ—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π"
                },
                {
                    "question": "–©–æ –æ–∑–Ω–∞—á–∞—î HTTPS?",
                    "type": "text_input",
                    "answer": "HTTP Secure",
                    "options": None,
                    "difficulty": 1,
                    "explanation": "HTTPS - —Ü–µ HTTP –∑ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è–º SSL/TLS"
                },
                {
                    "question": "–©–æ —Ç–∞–∫–µ —Ñ—ñ—à–∏–Ω–≥?",
                    "type": "multiple_choice",
                    "answer": "–û–±–º–∞–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö",
                    "options": [
                        "–û–±–º–∞–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö",
                        "–í—ñ—Ä—É—Å–Ω–∞ –∞—Ç–∞–∫–∞",
                        "–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏",
                        "–ö—Ä–∞–¥—ñ–∂–∫–∞ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è"
                    ],
                    "difficulty": 2,
                    "explanation": "–§—ñ—à–∏–Ω–≥ - —Ü–µ —Å–æ—Ü—ñ–∞–ª—å–Ω–∞ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ—è –¥–ª—è –∫—Ä–∞–¥—ñ–∂–∫–∏ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –¥–∞–Ω–∏—Ö"
                },
                {
                    "question": "RSA —î –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∞—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ–≥–æ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è",
                    "type": "true_false",
                    "answer": "True",
                    "options": None,
                    "difficulty": 3,
                    "explanation": "RSA –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞—Ä—É –∫–ª—é—á—ñ–≤: –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç–∞ –∑–∞–∫—Ä–∏—Ç–∏–π"
                }
            ]
        }

        total_questions = sum(len(questions)
                              for questions in comprehensive_questions.values())
        progress = ProgressBar(total_questions, "–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å")

        # –î–æ–¥–∞—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–æ –±–∞–∑–∏
        for category_name, questions in comprehensive_questions.items():
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            category_id = None
            for cat_id, cat_name in categories.items():
                if category_name in cat_name or cat_name in category_name:
                    category_id = cat_id
                    break

            if category_id:
                for q in questions:
                    options_json = json.dumps(
                        q["options"], ensure_ascii=False) if q["options"] else None

                    try:
                        cursor.execute('''
                            INSERT INTO questions (category_id, question_text, question_type, 
                                                 correct_answer, options, difficulty, explanation)
                            VALUES (?, ?, ?, ?, ?, ?, ?)
                        ''', (category_id, q["question"], q["type"], q["answer"],
                              options_json, q["difficulty"], q["explanation"]))

                        self.stats['questions_created'] += 1

                    except sqlite3.IntegrityError:
                        pass

                    progress.update()
                    time.sleep(0.005)

        conn.commit()
        conn.close()
        print(f"‚úÖ –î–æ–¥–∞–Ω–æ {self.stats['questions_created']} –Ω–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å")

    def generate_realistic_test_results(self, num_results: int = 150):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        print(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {num_results} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è...")

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        cursor.execute("SELECT id FROM users WHERE is_admin = 0")
        user_ids = [row[0] for row in cursor.fetchall()]

        cursor.execute("SELECT id FROM categories")
        category_ids = [row[0] for row in cursor.fetchall()]

        if not user_ids or not category_ids:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–±–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π")
            return

        progress = ProgressBar(num_results, "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–¥–µ—è–∫—ñ –∫—Ä–∞—â—ñ, –¥–µ—è–∫—ñ –≥—ñ—Ä—à—ñ)
        user_profiles = {}
        for user_id in user_ids:
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –Ω–∞–≤–∏—á–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            skill_level = random.choice([
                'beginner',    # 30% - –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ
                'beginner',
                'beginner',
                'intermediate',  # 50% - —Å–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
                'intermediate',
                'intermediate',
                'intermediate',
                'intermediate',
                'advanced',    # 20% - –ø—Ä–æ—Å—É–Ω—É—Ç—ñ
                'advanced'
            ])

            user_profiles[user_id] = {
                'skill_level': skill_level,
                'preferred_categories': random.sample(category_ids, random.randint(2, 4)),
                'activity_level': random.choice(['low', 'medium', 'high'])
            }

        for i in range(num_results):
            user_id = random.choice(user_ids)
            profile = user_profiles[user_id]

            # –í–∏–±–∏—Ä–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–±—ñ–ª—å—à–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –¥–ª—è —É–ª—é–±–ª–µ–Ω–∏—Ö)
            if random.random() < 0.7 and profile['preferred_categories']:
                category_id = random.choice(profile['preferred_categories'])
            else:
                category_id = random.choice(category_ids)

            # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç–µ—Å—Ç—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            if profile['activity_level'] == 'high':
                total_questions = random.choice([10, 15, 20])
            elif profile['activity_level'] == 'medium':
                total_questions = random.choice([5, 10, 15])
            else:
                total_questions = random.choice([5, 10])

            # –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è –Ω–∞–≤–∏—á–æ–∫
            if profile['skill_level'] == 'advanced':
                # –ü—Ä–æ—Å—É–Ω—É—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: 70-95% –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                success_rate = random.uniform(0.7, 0.95)
            elif profile['skill_level'] == 'intermediate':
                # –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å: 50-80% –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                success_rate = random.uniform(0.5, 0.8)
            else:
                # –ü–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ: 20-60% –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                success_rate = random.uniform(0.2, 0.6)

            correct_answers = max(
                0, min(total_questions, int(total_questions * success_rate)))

            # –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –Ω–∞–≤–∏—á–æ–∫ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–∏—Ç–∞–Ω—å
            base_time_per_question = {
                'advanced': random.randint(30, 60),
                'intermediate': random.randint(45, 90),
                'beginner': random.randint(60, 120)
            }[profile['skill_level']]

            time_spent = total_questions * \
                base_time_per_question + random.randint(-30, 60)
            time_spent = max(30, time_spent)  # –ú—ñ–Ω—ñ–º—É–º 30 —Å–µ–∫—É–Ω–¥

            # –í–∏–ø–∞–¥–∫–æ–≤–∞ –¥–∞—Ç–∞ —Ç–µ—Å—Ç—É (–æ—Å—Ç–∞–Ω–Ω—ñ 4 –º—ñ—Å—è—Ü—ñ, –∑ –±—ñ–ª—å—à–æ—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é –æ—Å—Ç–∞–Ω–Ω—ñ–º —á–∞—Å–æ–º)
            if random.random() < 0.6:  # 60% —Ç–µ—Å—Ç—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
                days_ago = random.randint(1, 30)
            else:  # 40% —Ç–µ—Å—Ç—ñ–≤ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ
                days_ago = random.randint(31, 120)

            test_date = datetime.now() - timedelta(days=days_ago)

            # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —á–∞—Å –¥–Ω—è
            test_date = test_date.replace(
                hour=random.randint(8, 22),
                minute=random.randint(0, 59),
                second=random.randint(0, 59)
            )

            try:
                cursor.execute('''
                    INSERT INTO test_results (user_id, category_id, total_questions, 
                                            correct_answers, test_date, time_spent)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (user_id, category_id, total_questions, correct_answers,
                      test_date.isoformat(), time_spent))

                self.stats['test_results_created'] += 1

            except Exception as e:
                print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É: {e}")

            progress.update()
            time.sleep(0.01)

        conn.commit()
        conn.close()
        print(
            f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {self.stats['test_results_created']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")

    def generate_answer_details(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        print("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π...")

        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        cursor.execute('''
            SELECT tr.id, tr.category_id, tr.total_questions, tr.correct_answers
            FROM test_results tr
            LEFT JOIN answer_details ad ON tr.id = ad.test_result_id
            WHERE ad.id IS NULL
        ''')

        test_results = cursor.fetchall()

        if not test_results:
            print("‚úÖ –í—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∂–µ –º–∞—é—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
            return

        progress = ProgressBar(len(test_results), "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ—Ç–∞–ª–µ–π")

        for test_result_id, category_id, total_questions, correct_answers in test_results:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            cursor.execute('''
                SELECT id, difficulty FROM questions 
                WHERE category_id = ? 
                ORDER BY RANDOM() 
                LIMIT ?
            ''', (category_id, total_questions))

            questions = cursor.fetchall()

            if len(questions) < total_questions:
                # –Ø–∫—â–æ –ø–∏—Ç–∞–Ω—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ, –±–µ—Ä–µ–º–æ –∑ —ñ–Ω—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
                cursor.execute('''
                    SELECT id, difficulty FROM questions 
                    ORDER BY RANDOM() 
                    LIMIT ?
                ''', (total_questions - len(questions),))

                additional_questions = cursor.fetchall()
                questions.extend(additional_questions)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –±—É–¥—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏
            correct_indices = random.sample(
                range(total_questions), correct_answers)

            for i, (question_id, difficulty) in enumerate(questions[:total_questions]):
                is_correct = i in correct_indices

                # –ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ
                if difficulty == 1:  # –õ–µ–≥–∫—ñ
                    base_time = random.randint(15, 45)
                elif difficulty == 2:  # –°–µ—Ä–µ–¥–Ω—ñ
                    base_time = random.randint(30, 90)
                else:  # –í–∞–∂–∫—ñ
                    base_time = random.randint(45, 150)

                # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–∞–∑–≤–∏—á–∞–π —à–≤–∏–¥—à—ñ (–∑–¥–æ–≥–∞–¥–∫–∏) –∞–±–æ –ø–æ–≤—ñ–ª—å–Ω—ñ—à—ñ (—Ä–æ–∑–¥—É–º–∏)
                if not is_correct:
                    if random.random() < 0.3:  # 30% —à–≤–∏–¥–∫–∏—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                        base_time = int(base_time * 0.5)
                    elif random.random() < 0.3:  # 30% –ø–æ–≤—ñ–ª—å–Ω–∏—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                        base_time = int(base_time * 1.5)

                answer_time = max(5, base_time + random.randint(-10, 20))

                cursor.execute('''
                    INSERT INTO answer_details (test_result_id, question_id, is_correct, answer_time)
                    VALUES (?, ?, ?, ?)
                ''', (test_result_id, question_id, is_correct, answer_time))

                self.stats['answer_details_created'] += 1

            progress.update()
            time.sleep(0.005)

        conn.commit()
        conn.close()
        print(
            f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {self.stats['answer_details_created']} –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")

    def add_sample_categories(self):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —è–∫—â–æ —ó—Ö –º–∞–ª–æ"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        cursor.execute("SELECT COUNT(*) FROM categories")
        category_count = cursor.fetchone()[0]

        if category_count < 6:
            additional_categories = [
                ("–í–µ–±-—Ä–æ–∑—Ä–æ–±–∫–∞", "HTML, CSS, JavaScript, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏"),
                ("–ú–æ–±—ñ–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞", "Android, iOS, React Native, Flutter"),
                ("–ú–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è", "–ê–ª–≥–æ—Ä–∏—Ç–º–∏ ML, –Ω–µ–π—Ä–æ–Ω–Ω—ñ –º–µ—Ä–µ–∂—ñ, –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö"),
                ("DevOps", "CI/CD, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü—ñ—è, —Ö–º–∞—Ä–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó"),
                ("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ü–ó", "–ú–µ—Ç–æ–¥–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è, QA")
            ]

            for name, description in additional_categories:
                try:
                    cursor.execute('''
                        INSERT INTO categories (name, description)
                        VALUES (?, ?)
                    ''', (name, description))
                    print(f"–î–æ–¥–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é: {name}")
                except sqlite3.IntegrityError:
                    pass  # –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∂–µ —ñ—Å–Ω—É—î

            conn.commit()

        conn.close()

    def generate_all_demo_data(self, clear_existing: bool = False):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
        print("–ì–ï–ù–ï–†–ê–¢–û–† –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–ô–ù–ò–• –î–ê–ù–ò–• v2.0")
        print("=" * 60)
        print("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ")
        print("=" * 60)

        start_time = time.time()

        if clear_existing:
            self.clear_demo_data()

        print("\n–ï—Ç–∞–ø 1: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏")
        self.add_sample_categories()

        print("\n–ï—Ç–∞–ø 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        self.generate_realistic_users(25)

        print("\n–ï—Ç–∞–ø 3: –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∏—Ç–∞–Ω—å")
        self.generate_comprehensive_questions()

        print("\n–ï—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        self.generate_realistic_test_results(120)

        print("\n–ï—Ç–∞–ø 5: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π")
        self.generate_answer_details()

        end_time = time.time()
        duration = end_time - start_time

        print("\n" + "=" * 60)
        print("‚úÖ –ì–ï–ù–ï–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
        print("=" * 60)
        print(f"–ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {self.stats['users_created']}")
        print(f"–ü–∏—Ç–∞–Ω—å –¥–æ–¥–∞–Ω–æ: {self.stats['questions_created']}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—ñ–≤: {self.stats['test_results_created']}")
        print(
            f"–î–µ—Ç–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {self.stats['answer_details_created']}")
        print("\n–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ!")
        print("–î–ª—è –≤—Ö–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

        # –ü–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        self.show_sample_users()

    def show_sample_users(self):
        """–ü–æ–∫–∞–∑ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        print("\n–ü–†–ò–ö–õ–ê–î–ò –°–¢–í–û–†–ï–ù–ò–• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í:")
        print("-" * 50)

        # –ü–æ–∫–∞–∑—É—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
        cursor.execute('''
            SELECT username, is_admin FROM users 
            WHERE is_admin = 1 AND username LIKE '%.%'
            LIMIT 3
        ''')

        admins = cursor.fetchall()
        if admins:
            print("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏:")
            for username, _ in admins:
                print(f"   ‚Ä¢ {username} (–ø–∞—Ä–æ–ª—å: demo123 –∞–±–æ –ø–æ–¥—ñ–±–Ω–∏–π)")

        # –ü–æ–∫–∞–∑—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        cursor.execute('''
            SELECT username, is_admin FROM users 
            WHERE is_admin = 0 AND username LIKE '%.%'
            LIMIT 5
        ''')

        users = cursor.fetchall()
        if users:
            print("\n–ó–≤–∏—á–∞–π–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:")
            for username, _ in users:
                print(f"   ‚Ä¢ {username}")

        conn.close()
        print("\n–ü–∞—Ä–æ–ª—ñ –∑–∞–∑–≤–∏—á–∞–π –º–∞—é—Ç—å —Ñ–æ—Ä–º–∞—Ç: demo123, test456, —ñ–º'—è123 —Ç–æ—â–æ")

    def create_admin_user(self, username: str = "admin", password: str = "admin123"):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()

        password_hash = hashlib.sha256(password.encode()).hexdigest()

        try:
            cursor.execute('''
                INSERT INTO users (username, password_hash, email, registration_date, is_admin)
                VALUES (?, ?, ?, ?, ?)
            ''', (username, password_hash, f"{username}@admin.local",
                  datetime.now().isoformat(), True))

            conn.commit()
            print(
                f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {username} | –ø–∞—Ä–æ–ª—å: {password}")

        except sqlite3.IntegrityError:
            print(f"‚ö†Ô∏è  –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {username} –≤–∂–µ —ñ—Å–Ω—É—î")

        conn.close()


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    print("–†–û–ó–®–ò–†–ï–ù–ò–ô –ì–ï–ù–ï–†–ê–¢–û–† –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–ô–ù–ò–• –î–ê–ù–ò–•")
    print("–í–µ—Ä—Å—ñ—è 2.0 - –ü–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
    print("=" * 60)

    generator = EnhancedDemoDataGenerator("informatics_trainer.db")

    print("\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:")
    print("1. –ü–æ–≤–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è (–æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ)")
    print("2. –î–æ–¥–∞—Ç–∏ –¥–∞–Ω—ñ (–∑–±–µ—Ä–µ–≥—Ç–∏ —ñ—Å–Ω—É—é—á—ñ)")
    print("3. –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    print("4. –û—á–∏—Å—Ç–∏—Ç–∏ –¥–µ–º–æ-–¥–∞–Ω—ñ")
    print("5. –í–∏—Ö—ñ–¥")

    while True:
        choice = input("\n–í–∞—à –≤–∏–±—ñ—Ä (1-5): ").strip()

        if choice == "1":
            confirm = input(
                "‚ö†Ô∏è  –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –¥–µ–º–æ-–¥–∞–Ω—ñ. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ").lower()
            if confirm in ['y', 'yes', '—Ç–∞–∫']:
                generator.generate_all_demo_data(clear_existing=True)
            break

        elif choice == "2":
            generator.generate_all_demo_data(clear_existing=False)
            break

        elif choice == "3":
            username = input(
                "–Ü–º'—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (admin): ").strip() or "admin"
            password = input("–ü–∞—Ä–æ–ª—å (admin123): ").strip() or "admin123"
            generator.create_admin_user(username, password)
            break

        elif choice == "4":
            confirm = input(
                "‚ö†Ô∏è  –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –¥–µ–º–æ-–¥–∞–Ω—ñ. –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/n): ").lower()
            if confirm in ['y', 'yes', '—Ç–∞–∫']:
                generator.clear_demo_data()
            break

        elif choice == "5":
            print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break

        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    main()
